# -*- coding: utf-8 -*-
"""Group_Project_v3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oJSUn2rQbwtdQZuJV7QPUNR2cClOMlim
"""

!curl -L -o archive.zip https://www.kaggle.com/api/v1/datasets/download/mohiychoithwani/vehicle-image-classification-dataset-4-classes
!unzip archive.zip

import torch
import torchvision
import torchvision.transforms as transforms
import torch.nn as nn
import torch.optim as optim
from torch.optim.lr_scheduler import StepLR
from sklearn.metrics import confusion_matrix, classification_report
import matplotlib.pyplot as plt
import numpy as np

num_classes = 4  # bicycle, car, motor bike, truck
batch_size = 32
num_epochs = 30
learning_rate = 0.01
classes = ['bicycle', 'car', 'motor bike', 'truck']

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = torchvision.models.resnet50(pretrained=True)

# Modify final layer
num_features = model.fc.in_features
model.fc = nn.Linear(num_features, num_classes)
model = model.to(device)

transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.RandomHorizontalFlip(p=0.5),
    transforms.RandomRotation(degrees=15),
    transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2, hue=0.1),
    transforms.ToTensor(),
    transforms.Normalize(mean=(0.5, 0.5, 0.5), std=(0.5, 0.5, 0.5))
])

data_path = '/content/images'
full_dataset = torchvision.datasets.ImageFolder(root=data_path, transform=transform)

# Split dataset
train_size = int(0.7 * len(full_dataset))
val_size = int(0.15 * len(full_dataset))
test_size = len(full_dataset) - train_size - val_size

train_dataset, val_dataset, test_dataset = torch.utils.data.random_split(
    full_dataset, [train_size, val_size, test_size]
)

train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
val_loader = torch.utils.data.DataLoader(val_dataset, batch_size=batch_size, shuffle=False)
test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=batch_size, shuffle=False)

criterion = nn.CrossEntropyLoss(label_smoothing=0.1)
optimizer = optim.SGD(model.parameters(), lr=learning_rate, momentum=0.9, weight_decay=5e-4)
scheduler = StepLR(optimizer, step_size=5, gamma=0.1)  # Reduce LR by 0.1 every 5 epochs

def train_model(model, train_loader, val_loader, num_epochs, device):
    training_acc = []
    validation_acc = []
    training_loss = []
    epoch_nums = []

    for epoch in range(num_epochs):
        model.train()
        epoch_loss = 0
        correct = 0
        total = 0

        for images, labels in train_loader:
            images, labels = images.to(device), labels.to(device)

            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            epoch_loss += loss.item()
            _, predicted = torch.max(outputs, 1)
            correct += (predicted == labels).sum().item()
            total += labels.size(0)

        training_loss.append(epoch_loss / len(train_loader))
        training_acc.append(correct / total)

        # Evaluate on validation set
        val_accuracy = evaluate_model(model, val_loader, device)
        validation_acc.append(val_accuracy)

        epoch_nums.append(epoch + 1)
        print(f'Epoch [{epoch + 1}/{num_epochs}], Loss: {epoch_loss / len(train_loader):.4f}, '
              f'Training Accuracy: {correct / total:.4f}, Validation Accuracy: {val_accuracy:.4f}')

        scheduler.step()

    return training_loss, training_acc, validation_acc, epoch_nums


def evaluate_model(model, loader, device):
    model.eval()
    correct = 0
    total = 0

    with torch.no_grad():
        for images, labels in loader:
            images, labels = images.to(device), labels.to(device)
            outputs = model(images)
            _, predicted = torch.max(outputs, 1)
            correct += (predicted == labels).sum().item()
            total += labels.size(0)

    return correct / total

training_loss, training_acc, validation_acc, epoch_nums = train_model(
    model, train_loader, val_loader, num_epochs, device
)

test_accuracy = evaluate_model(model, test_loader, device)
print(f'Test Accuracy: {test_accuracy:.4f}')

y_pred = []
y_true = []

model.eval()
with torch.no_grad():
    for images, labels in test_loader:
        images = images.to(device)
        labels = labels.to(device)
        outputs = model(images)
        _, predicted = torch.max(outputs, 1)

        y_pred.extend(predicted.cpu().numpy())
        y_true.extend(labels.cpu().numpy())

cf_matrix = confusion_matrix(y_true, y_pred)
print("Confusion Matrix:\n", cf_matrix)
print("\nClassification Report:\n", classification_report(y_true, y_pred, target_names=classes))